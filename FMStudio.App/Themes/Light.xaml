<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:FMStudio.App.Themes">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Cobalt.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
        <ResourceDictionary Source="pack://application:,,,/FMStudio;component/AppResources.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <SolidColorBrush x:Key="Border">Gray</SolidColorBrush>

    <SolidColorBrush x:Key="Red">Tomato</SolidColorBrush>
    <SolidColorBrush x:Key="Blue">SlateBlue</SolidColorBrush>
    <SolidColorBrush x:Key="Gray">SlateGray</SolidColorBrush>
    <SolidColorBrush x:Key="Green">#5EDB5E</SolidColorBrush>
    <SolidColorBrush x:Key="Orange">DarkOrange</SolidColorBrush>
    <SolidColorBrush x:Key="DarkBlue">DarkBlue</SolidColorBrush>

    <SolidColorBrush x:Key="SqlViewerDefault">Black</SolidColorBrush>
    <SolidColorBrush x:Key="FocusLostGray">#DDDDDD</SolidColorBrush>

    <!--#region TextBlock-->

    <Style x:Key="Icon" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="pack://application:,,,/Fonts/#fontawesome" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True">
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconBlue" TargetType="TextBlock" BasedOn="{StaticResource Icon}">
        <Setter Property="Foreground" Value="{StaticResource DarkBlue}" />
    </Style>

    <Style x:Key="IconGray" TargetType="TextBlock" BasedOn="{StaticResource Icon}">
        <Setter Property="Foreground" Value="{StaticResource Gray}" />
    </Style>

    <Style x:Key="IconGreen" TargetType="TextBlock" BasedOn="{StaticResource Icon}">
        <Setter Property="Foreground" Value="{StaticResource Green}" />
    </Style>

    <Style x:Key="IconOrange" TargetType="TextBlock" BasedOn="{StaticResource Icon}">
        <Setter Property="Foreground" Value="{StaticResource Orange}" />
    </Style>

    <Style x:Key="IconRed" TargetType="TextBlock" BasedOn="{StaticResource Icon}">
        <Setter Property="Foreground" Value="{StaticResource Red}" />
    </Style>

    <Style x:Key="Subtext" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource Gray}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True">
                <Setter Property="Foreground" Value="LightGray" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region Label-->

    <Style x:Key="IconLabel" TargetType="Label">
        <Setter Property="FontFamily" Value="pack://application:,,,/Fonts/#fontawesome" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeViewItem}}}" Value="True">
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconLabelBlue" TargetType="Label" BasedOn="{StaticResource IconLabel}">
        <Setter Property="Foreground" Value="{StaticResource DarkBlue}" />
    </Style>

    <Style x:Key="IconLabelGray" TargetType="Label" BasedOn="{StaticResource IconLabel}">
        <Setter Property="Foreground" Value="{StaticResource Gray}" />
    </Style>

    <Style x:Key="IconLabelGreen" TargetType="Label" BasedOn="{StaticResource IconLabel}">
        <Setter Property="Foreground" Value="{StaticResource Green}" />
    </Style>

    <Style x:Key="IconLabelOrange" TargetType="Label" BasedOn="{StaticResource IconLabel}">
        <Setter Property="Foreground" Value="{StaticResource Orange}" />
    </Style>

    <Style x:Key="IconLabelRed" TargetType="Label" BasedOn="{StaticResource IconLabel}">
        <Setter Property="Foreground" Value="{StaticResource Red}" />
    </Style>

    <!--#endregion-->

    <!--#region ColoredLabel-->
    <Style x:Key="ColoredLabel" TargetType="Label" BasedOn="{StaticResource IconLabel}">
        <Setter Property="FontFamily" Value="Verdana" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    <Style x:Key="ColoredLabelBlue" TargetType="Label" BasedOn="{StaticResource ColoredLabel}">
        <Setter Property="Foreground" Value="{StaticResource DarkBlue}" />
    </Style>

    <Style x:Key="ColoredLabelGray" TargetType="Label" BasedOn="{StaticResource ColoredLabel}">
        <Setter Property="Foreground" Value="{StaticResource Gray}" />
    </Style>

    <Style x:Key="ColoredLabelGreen" TargetType="Label" BasedOn="{StaticResource ColoredLabel}">
        <Setter Property="Foreground" Value="{StaticResource Green}" />
    </Style>

    <Style x:Key="ColoredLabelOrange" TargetType="Label" BasedOn="{StaticResource ColoredLabel}">
        <Setter Property="Foreground" Value="{StaticResource Orange}" />
    </Style>

    <Style x:Key="ColoredLabelRed" TargetType="Label" BasedOn="{StaticResource ColoredLabel}">
        <Setter Property="Foreground" Value="{StaticResource Red}" />
    </Style>
    <!--#endregion-->

    <Style x:Key="StretchedTreeView" TargetType="TreeViewItem" BasedOn="{StaticResource {x:Type TreeViewItem}}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <ToggleButton IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" Name="Expander">
                                <ToggleButton.Style>
                                    <Style TargetType="ToggleButton">
                                        <Setter Property="UIElement.Focusable" Value="false" />
                                        <Setter Property="FrameworkElement.Width" Value="16" />
                                        <Setter Property="FrameworkElement.Height" Value="16" />
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="ToggleButton">
                                                    <Border Padding="5,5,5,5" Background="#00FFFFFF" Width="16" Height="16">
                                                        <Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
                                                            <Path.Data>
                                                                <PathGeometry Figures="M0,0L0,6L6,0z" />
                                                            </Path.Data>
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="135" CenterX="3" CenterY="3" />
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF1BBBFA" />
                                                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#00FFFFFF" />
                                                        </Trigger>
                                                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                            <Setter TargetName="ExpandPath" Property="UIElement.RenderTransform">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="180" CenterX="3" CenterY="3" />
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter TargetName="ExpandPath" Property="Shape.Fill" Value="#FF595959" />
                                                            <Setter TargetName="ExpandPath" Property="Shape.Stroke" Value="#FF262626" />
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Border x:Name="Bd" HorizontalAlignment="Stretch"
                      BorderThickness="{TemplateBinding Border.BorderThickness}"
                      BorderBrush="{TemplateBinding Border.BorderBrush}"
                      Padding="{TemplateBinding Control.Padding}"
                      Background="{TemplateBinding Panel.Background}"
                      SnapsToDevicePixels="True"
                      Grid.Column="1">
                                <ContentPresenter x:Name="PART_Header"
                                  Content="{TemplateBinding HeaderedContentControl.Header}"
                                  ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                  ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                  ContentTemplateSelector="{TemplateBinding HeaderedItemsControl.HeaderTemplateSelector}"
                                  ContentSource="Header"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" />
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TreeViewItem.IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="UIElement.Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter TargetName="Expander" Property="UIElement.Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="TreeViewItem.IsSelected" Value="True">
                            <Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Panel.Background" Value="{StaticResource FocusLostGray}" />
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>